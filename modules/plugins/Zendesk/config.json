{
  "commands": [
    {
      "triggers": ["searchCompanyTickets", "ZDOrgTicket", "ZDorgTicket", "ZDorgticket", "zdorgticket"],
      "function": "searchCompanyTickets",
      "description": "Search Zendesk tickets by specific organization. Filter results to specific ticket status (e.g. open, unresolved)",
      "helptext": "<b>/ZDOrgTicket</b> STATUS ORG",
      "param":"STATUS = open | new | pending | solved |closed | unresolved | all. ORG is the company name as it appears on Zendesk ",
      "example":"/ZDOrgTicket solved symphony <br></br>/ZDOrgTicket symphony",
      "category": "Information lookup",
      "permission": "Zendesk Agent"
    },
    {
      "triggers": ["searchUserTickets", "ZDUserTicket", "ZDuser,Ticket", "ZDuserticket", "zduserticket"],
      "function": "searchUserTickets",
      "description": "Search Zendesk tickets by specific user. If no @mentioned user, the calling user will be used. Filter results to specific ticket status (e.g. open, unresolved)",
      "helptext": "<b>/ZDUserTicket</b> STATUS[@USER]",
      "param":"STATUS = open | new | pending | solved | closed | unresolved | all @USER is an @mention (optional)",
      "example":"/ZDUserTicket open <br></br>/ZDUserTicket open @Joe Smith",
      "category": "Information lookup",
      "permission": "All"
     },
    {
      "triggers": ["showZD","ZDShow", "ZDshow", "zdshow", "ZD", "zd" ],
      "function": "showZD",
      "description": "Shows Zendesk ticket(s) matching the Zendesk ticket ID(s)",
      "helptext": "<b>/ZDShow</b> TICKET_ID ...)",
      "param":"TICKET_ID is Zendesk ticket ID <br></br>Can be multiple IDs separated with spaces",
      "example":"/ZDShow 222 <br></br>/ZSShow 222 425 342",
      "category": "Information lookup",
      "permission": "All"
    },
    {
      "triggers": ["recentZD", "ZDRecent", "ZDrecent", "zdrecent"],
      "function": "recentZD",
      "description": "List recent Zendesk tickets viewed by the calling Zendesk agent",
      "helptext": "<b>/ZDRecent</b>",
      "param":"None",
      "example":"/ZDRecent",
      "category": "Information lookup",
      "permission": "Zendesk Agent"
    },
    {
      "triggers": ["today", "ZDToday", "ZDtoday", "zdtoday"],
      "function": "newTicketToday",
      "description": "Shows all tickets raised today (1) or from any other given day up to 5 days ago",
      "helptext": "<b>/ZDToday</b> 1-5",
      "param":"DAYS_AGO is a number betwteen 1 and 5",
      "example":"/ZDToday 1 <br></br>/ZDtoday 2",
      "category": "Information lookup",
      "permission": "Zendesk Agent"
    },
    {
      "triggers": ["comments", "comment", "ZDComments", "ZDcomments", "ZDComment", "ZDcomment", "zdomments", "zdcomment"],
      "function": "showTicketComments",
      "description": "Shows Zendesk Ticket comments for Zendesk ticket ID",
      "helptext": "<b>/ZDComments</b> TICKET_ID",
      "param":"TICKET_ID is Zendesk ticket ID",
      "example":"/ZDComments 222",
      "category": "Information lookup",
      "permission": "All"
    },
    {
      "triggers": ["ZDUser", "ZDuser", "zduser"],
      "function": "userZD",
      "description": "Search Zendesk users. Filter results base on first/last/full name of user. Filter results based on company name. <br></br>Display users with their email address, organisation and role",
      "helptext": "<b>/ZDUser</b> NAME  [ | COMPANY]",
      "param":"NAME can be first name, last name or full name <br></br>COMPANY is company name (optional)",
      "example":"/ZDUser alex <br></br>/ZDUser | symphony <br></br>/ZDUser alex | symphony",
      "category": "Information lookup",
      "permission": "Zendesk Agent"
    },
    {
      "triggers": ["KB", "kb", "ZDKB", "ZDkb", "zdkb"],
      "function": "searchKb",
      "description": "List all Knowledge Base article with that WORD",
      "helptext": "<b>/ZDKB</b> WORD",
      "param": "WORD is the search word for the article",
      "example": "/ZDKB performance",
      "category": "Information lookup",
      "permission": "All"
    },
    {
      "triggers": ["<b>/createTicket</b>", "createTicket", "createticket", "ticketCreate", "ticketcreate" ,"newticket", "newTicket"],
      "function": "TicketCreate",
      "description": "Create a Zendesk ticket as an Zendesk Agent with a subject and description (must be separated by | in between each)",
      "helptext": "<b>/createTicket</b> subject| description",
      "param":"Subject| Description",
      "example":"/createTicket This is the subject of the ticket| This is the description of the ticket",
      "category": "Zendesk",
      "permission": "Zendesk Agent"
    },
    {
      "triggers": ["<b>/createRequest</b>", "createRequest", "createrequest", "newZD", "newzd", "requestCreate", "newrequest", "newRequest", "requestcreate"],
      "function": "RequestCreate",
      "description": " 1) Create a Zendesk Request as a Zendesk agent by @mentioning the requester name, give a subject and description. <br></br>2) Create a Zendesk Request as an Zendesk End-user by just giving the a subject and description. (must be separated by comma | in between each)",
      "helptext": "<b>/createRequest</b> @Mention_Symphony_User| subject| description <br></br><b>/createRequest</b> subject| description",
      "param":" @Mention_Symphony_User| subject| description",
      "example":"/createRequest @alex nalin| This is the subject of the ticket| This is the description of the ticket. <br></br> /createRequest This is the subject of the ticket| This is the description of the ticket.",
      "category": "Zendesk",
      "permission": "Zendesk Agent/Zendesk End-user"
    },
    {
      "triggers": ["<b>/ticketUpdate</b>", "ticketupdate", "ticketUpdate", "update", "Update", "updateTicket", "updateticket"],
      "function": "ticketUpdate",
      "description": "1) As an <b>Zendesk Agent</b>, add a comment/update to an existing Zendesk ticket as private or public and set its status <br></br>2) As a <b>Zendesk End-user</b>, add a comment/update to an existing Zendesk ticket as public",
      "helptext": "1) <b>/ticketUpdate</b> Zendesk_Ticket_ID| comment| status| public/private  <br></br>2) <b>/ticketUpdate</b> Zendesk_Ticket_ID| comment",
      "param":"Zendesk_Ticket_ID| comment| status| public/private",
      "example":"1) /ticketUpdate 222| This is a hidden update| open| private <br></br> 2)/ticketUpdate 222| This comment will be visible to all| public",
      "category": "Zendesk",
      "permission": "Zendesk Agent/Zendesk End-user"
    },
    {
      "triggers": ["<b>/assignTicket</b>", "assignTicket", "assignticket", "Assign", "assign"],
      "function": "assignTicket",
      "description": "Assign as assignee the Symphony @mentioned user who is also a Zendesk Agent. This will leave an internal comment about the assignment",
      "helptext": "<b>/assignTicket</b> Zendesk_Ticket_ID @Mention_Symphony_User",
      "param":"Zendesk_Ticket_ID @Mention_Symphony_User",
      "example":"/assignTicket 400 @alex nalin",
      "category": "Zendesk",
      "permission": "Zendesk Agent"
    },
    {
      "triggers": ["<b>/createZendeskUser</b>", "createZendeskUser", "createzendeskuser", "createUser", "newUser", "newuser"],
      "function": "createZendeskUser",
      "description": "Create a new Zendesk end-user by @mentioning the Symphony User, the Pod name will be used to cross check existing Zendesk organization name",
      "helptext": "<b>/createZendeskUser</b> @Mention_Symphony_User",
      "param":"@Mention_Symphony_User",
      "example":"/createZendeskUser @alex nalin",
      "category": "Zendesk",
      "permission": "Bot Admin"
    },
    {
      "triggers": ["<b>/addAccess</b>", "addAccess", "addaccess"],
      "function": "addAccess",
      "description": "Add user or users to the authorised list to run Bot commands",
      "helptext": "<b>/addAccess</b> @Mention_Symphony_User(s)",
      "param":"@Mention_Symphony_User(s)",
      "example":"/addAccess @alex nalin or /addAccess @alex nalin @franck berdat",
      "category": "Zendesk/General",
      "permission": "Bot Admin"
    },
    {
      "triggers": ["<b>/removeAccess</b>", "removeAccess", "removeaccess", "remaccess", "remAccess"],
      "function": "removeAccess",
      "description": "Remove user from the authorised list to run Bot commands",
      "helptext": "<b>/removeAccess</b> @Mention_Symphony_User(s)",
      "param":"@Mention_Symphony_User(s)",
      "example":"/removeAccess @alex nalin or /removeAccess @alex nalin @franck berdat",
      "category": "Zendesk/General",
      "permission": "Bot Admin"
    },
    {
      "triggers": ["<b>/listAllAccess</b>", "listAllAccess", "listallaccess" , "listAccess", "listaccess"],
      "function": "listAllAccess",
      "description": "List all the users authorised to run Bot commands",
      "helptext": "<b>/listAllAccess</b>",
       "param":"None",
      "example":"/listAllAccess",
      "category": "Zendesk/General",
      "permission": "BotAdmin"
    }
  ]
}